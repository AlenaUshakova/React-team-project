{"version":3,"file":"static/js/128.77c662c8.chunk.js","mappings":"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","sources":["components/ExpIncPart/IncomePart.jsx","pages/Income/Income.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addIncome, getIncomeCategories, getIncomeStats } from \"redux/Transaction/transactionOperations\";\nimport { getBalance, getIncomesCategories, getIncomesMonthStats, getIncomesTransactions, getIsLoading } from \"redux/Transaction/transactionSelectors\";\nimport s from './ExpIncPart.module.css';\nimport { Calendar } from 'components/Calendar/Calendar';\nimport { Calculator } from 'components/Calculator/Calculator';\nimport { Loader } from 'components/Loader/Loader';\nimport Button from 'components/common/button/button';\nimport { SummaryTable } from 'components/SummaryTable/SummaryTable';\nimport { TransactionTable } from 'components/TransactionTable/TransactionTable';\nimport { useLocation } from \"react-router-dom\";\n\n\nexport const IncomePart = () => {\n    const [description, setDescription] = useState('');\n    const [category, setCategory] = useState('');\n    const [sum, setSum] = useState('');\n    const [list, setList] = useState(false);\n    const [startDate, setStartDate] = useState(new Date());\n    const [emptyInput, setEmptyInput] = useState(false);\n    const loading = useSelector(getIsLoading) === true;\n\n\n\n    const prodInc = useSelector(getIncomesCategories);\n    const incomesTransactionData = useSelector(getIncomesTransactions);\n    const incomesSummaryData = useSelector(getIncomesMonthStats);\n    const balance = useSelector(getBalance);\n    const dispatch = useDispatch();\n    const pageLocation = useLocation().pathname;\n\n\n    useEffect(() => {\n        dispatch(getIncomeCategories());\n        dispatch(getIncomeStats());\n    }, [dispatch, balance]);\n\n    const handleChangeForm = evt => {\n        const { value, name } = evt.target;\n        switch (name) {\n            case 'description':\n                setDescription(value);\n                break;\n            case 'category':\n                setCategory(value);\n                break;\n            case 'sum':\n                setSum(value);\n                break;\n            default:\n                return;\n        }\n    };\n    const handleResetForm = () => {\n        setEmptyInput(false);\n        setDescription('');\n        setCategory('');\n        setSum('');\n        setStartDate(new Date());\n    };\n\n    const handleSubmitForm = evt => {\n        evt.preventDefault();\n\n        if (!description) {\n            setEmptyInput(true);\n            return;\n        }\n        if (!category) {\n            setEmptyInput(true);\n            return;\n        }\n        if (!sum) {\n            setEmptyInput(true);\n            return;\n        }\n        const items = {\n            description: description,\n            amount: Number(sum),\n            date: startDate.toISOString().slice(0, 10),\n            category: category,\n        };\n        dispatch(addIncome(items));\n        handleResetForm();\n    };\n    const handleIsListTogle = () => {\n        setList(!list);\n    };\n\n    const handleCloseByDrope = evt => {\n        if (evt.target === evt.currentTarget) {\n            setList(!list);\n        }\n    };\n\n\n    return (\n        <div className={s.container}>\n            <div className={s.contentContainer}>\n                {loading ? (\n                    <Loader />\n                ) : (\n                    <>\n                        <div className={s.formContainer}>\n                            <div className={s.calendar}>\n                                <Calendar startDate={startDate} setStartDate={setStartDate} />\n                            </div>\n                            <form className={s.form} onSubmit={handleSubmitForm}>\n                                <input\n                                    className={s.inputDescription}\n                                    placeholder=\"Product description\"\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    name=\"description\"\n                                    value={description}\n                                    onChange={handleChangeForm}\n                                />\n\n                                <div className={s.inputCategoryContainer}>\n                                    <button\n                                        className={s.inputCategory}\n                                        onClick={handleIsListTogle}\n                                        type=\"button\"\n                                    >\n                                        {category ? (\n                                            <p style={{ color: '#52555F' }}>{category}</p>\n                                        ) : (\n                                            <p style={{ color: '#c7ccdc' }}>Product category</p>\n                                        )}\n                                        <span className={s.arrow}>&#129171;</span>\n                                    </button>\n                                    {list && (\n                                        <>\n                                            <div\n                                                className={s.overlay}\n                                                onClick={handleCloseByDrope}>\n                                            </div>\n                                            <ul className={s.listCategory}>\n                                                {prodInc.map((el, ind) => (\n                                                    <li\n                                                        value={el}\n                                                        key={ind}\n                                                        className={s.itemCategory}\n                                                        onClick={() => {\n                                                            setCategory(el);\n                                                            handleIsListTogle();\n                                                        }}\n                                                    >\n                                                        {el}\n                                                    </li>\n                                                ))}\n                                            </ul>\n                                        </>\n                                    )}\n                                </div>\n                                <div className={s.errContainer}>\n                                    <p className={s.errDescriptionMsg}>\n                                        {!description && emptyInput && 'Enter description!'}\n                                    </p>\n                                    <p className={s.errCategoryMsg}>\n                                        {!category && emptyInput && 'Select category!'}\n                                    </p>\n                                    <p className={s.errSummMsg}>\n                                        {!sum && emptyInput && 'Enter sum!'}\n                                    </p>\n                                </div>\n                                <div className={s.inputSummContainer}>\n                                    <input\n                                        className={s.inputSumm}\n                                        placeholder=\"0,00\"\n                                        type=\"number\"\n                                        name=\"sum\"\n                                        value={sum}\n                                        onChange={handleChangeForm}\n                                    />\n                                    <Calculator />\n                                </div>\n                            </form>\n                            <div className={s.buttonContainer}>\n                                <Button\n                                    text={'INPUT'}\n                                    type={'submit'}\n                                    onClick={handleSubmitForm}\n                                />\n                                <Button\n                                    text={'CLEAR'}\n                                    type={'button'}\n                                    onClick={handleResetForm}\n                                />\n                            </div>\n                        </div>\n\n                        <div className={s.tableContainer}>\n                            <div className={s.prods}>\n                                <TransactionTable\n                                    transactionData={incomesTransactionData}\n                                    tablePage={pageLocation}\n                                />\n                            </div>\n                            <div className={s.sumary}>\n                                <SummaryTable summaryData={incomesSummaryData} />\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n\n};","// export default function Income() {\n//     return <div>Income...</div>;\n// }\n\nimport { IncomePart } from 'components/ExpIncPart/IncomePart';\n// import { Main } from 'components/Main/Main';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getIncomeCategories, getIncomeStats } from 'redux/Transaction/transactionOperations';\n\nconst Income = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getIncomeCategories());\n        dispatch(getIncomeStats());\n    }, [dispatch]);\n    return (\n        <>\n            <IncomePart />\n        </>\n    );\n};\n\nexport default Income;\n"],"names":["IncomePart","useState","description","setDescription","category","setCategory","sum","setSum","list","setList","Date","startDate","setStartDate","emptyInput","setEmptyInput","loading","useSelector","getIsLoading","prodInc","getIncomesCategories","incomesTransactionData","getIncomesTransactions","incomesSummaryData","getIncomesMonthStats","balance","getBalance","dispatch","useDispatch","pageLocation","useLocation","pathname","useEffect","getIncomeCategories","getIncomeStats","handleChangeForm","evt","target","value","name","handleResetForm","handleSubmitForm","preventDefault","items","amount","Number","date","toISOString","slice","addIncome","handleIsListTogle","className","s","Loader","Calendar","onSubmit","placeholder","autoComplete","type","onChange","onClick","style","color","currentTarget","map","el","ind","Calculator","text","TransactionTable","transactionData","tablePage","SummaryTable","summaryData"],"sourceRoot":""}